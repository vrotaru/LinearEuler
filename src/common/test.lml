

module Main = struct

    val print_prime : int * unit -> unit
    let print_prime p () =
        Print.int p; Print.newline ()
    
    val sum_prime : int * int -> int
    let sum_prime p sum =
        p + sum
    
    val for_demo : int * int * unit -> unit
    let for_demo i j () =
        Print.int (i * 100 + j); Print.newline ()
        
    val files_demo : unit -> unit
    let files_demo () =
        let rs = Files.read "test.lml" in
        Print.rstring !rs; Print.newline ();
        String.release rs
        
    val option_demo : int Option.t -> unit
    let option_demo o =
        let () = Array.debug !o; Print.newline () in
        match o with
        | Option.None -> ()
        | Option.Some _ -> ()
        
    val print_array : int Array.t * int -> unit
    let print_array arr i =
    	if i < Array.length !arr then
    		Print.int arr.(i); Print.string " ";
    		print_array arr (i + 1)
    	else
    		Array.irelease arr; Print.newline ()
    
    val sort_demo : unit -> unit
    let sort_demo () =
    	let arr = Decimal.array_of_list [9; 3; 88; 30; 1; 777] 6 in
    	let arr = HeapSort.isort arr in
    	print_array arr 0
    
    val main : unit -> unit
    let main () =
        let () = Primes.for_prime_to 10000 print_prime () in
        let () = Loops.for_ij 5 8 1 3 for_demo () in
        let () = sort_demo () in
        let sum = Primes.for_prime_to 10000 sum_prime 0 in
        Print.string " --->>> "; Print.int sum; Print.newline ();
        files_demo ();
        option_demo (Option.None);
        option_demo (Option.Some 42)
end

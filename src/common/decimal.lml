module Decimal = struct
    
    val num_digits : int -> int
    let num_digits n =
        num_digits_loop n 1
    
    val private num_digits_loop : int * int -> int
    let num_digits_loop n count =
        if n < 10 then
            count
        else
            num_digits_loop (n / 10) (count + 1)
    
    val to_digits : int -> int Array.t * int
    let to_digits n =
        let len = num_digits n in
        let digits = Array.imake len 0 in
        let digits = to_digits_loop digits n (len - 1) len in
        digits, len
    
    val private to_digits_loop : int Array.t * int * int * int -> int Array.t
    let to_digits_loop digits n index len =
        if index >= 0 then
            let digits = Array.set digits index (n % 10) in
            to_digits_loop digits (n / 10) (index - 1) len
        else
            digits

    val array_of_list : int List.t * int-> int Array.t
    let array_of_list il size =
        let buf = Array.imake size 0 in
        array_of_list_loop il buf 0
    
    val private array_of_list_loop : int List.t * int Array.t * int -> int Array.t
    let array_of_list_loop il ia index =
        match il with
        | [] -> ia
        | x :: rl ->
            let ia = Array.set ia index x in
            array_of_list_loop rl ia (index + 1)

end

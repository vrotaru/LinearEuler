(*
73167176531330624919225119674426574742355349194934
96983520312774506326239578318016984801869478851843
85861560789112949495459501737958331952853208805511
12540698747158523863050715693290963295227443043557
66896648950445244523161731856403098711121722383113
62229893423380308135336276614282806444486645238749
30358907296290491560440772390713810515859307960866
70172427121883998797908792274921901699720888093776
65727333001053367881220235421809751254540594752243
52584907711670556013604839586446706324415722155397
53697817977846174064955149290862569321978468622482
83972241375657056057490261407972968652414535100474
82166370484403199890008895243450658541227588666881
16427171479924442928230863465674813919123162824586
17866458359124566529476545682848912883142607690042
24219022671055626321111109370544217506941658960408
07198403850962455444362981230987879927244284909188
84580156166097919133875499200524063689912560717606
05886116467109405077541002256983155200055935729725
71636269561882670428252483600823257530420752963450
*)

module ConsecutiveProducts = struct
    
    type t = { target: int Array.t; start: int; source: int Array.t }
    
    val private fill : int * t -> t
    let fill index t = 
        let { t; ~target; ~start; ~source } = t in
        let digit = Array.get !source index in
        let target =  Array.set target (start + index) digit in
        { t with ~target; ~start; ~source }        
        

    val private chunk : int Array.t * int * int-> int Array.t * int
    let chunk target start num =
        let source, len = Decimal.to_digits num in
        let t = { ~target; ~start; ~source } in
        let t = Loops.for_i 0 (len - 1) fill t in
        let { t; ~target; ~source } = t in
        let (), () = free t, Array.irelease source in
        target, (start + len)
    
    val private init : int Array.t * int * int List.t -> int Array.t
    let init digits start nlist =
        match nlist with
        | [] -> digits
        | x :: rl -> 
            let digits, start = chunk digits start x in
            init digits start rl
            
    type u = { digits: int Array.t; product: int }
    
    val max_product: int * u -> u
    let max_product i u =
        let { u; ~digits; ~product } = u in
        let newp = digits.(i) * digits.(i + 1) * digits.(i + 2) * digits.(i + 3) * digits.(i + 4) in
        let product = if newp > product then newp else product in
        { u with ~digits; ~product }
    
    val main : unit -> unit
    let main () =
        let input = [
            73167176531;33062;491922;5119674426;57474235;5349194934;
            96983520312;77450;632623;9578318016;98480186;9478851843;
            85861560789;11294;949545;9501737958;33195285;3208805511;
            12540698747;15852;386305;0715693290;96329522;7443043557;
            66896648950;44524;452316;1731856403;09871112;1722383113;
            62229893423;38030;813533;6276614282;80644448;6645238749;
            30358907296;29049;156044;0772390713;81051585;9307960866;
            70172427121;88399;879790;8792274921;90169972;0888093776;
            65727333001;05336;788122;0235421809;75125454;0594752243;
            52584907711;67055;601360;4839586446;70632441;5722155397;
            53697817977;84617;406495;5149290862;56932197;8468622482;
            83972241375;65705;605749;0261407972;96865241;4535100474;
            82166370484;40319;989000;8895243450;65854122;7588666881;
            16427171479;92444;292823;0863465674;81391912;3162824586;
            17866458359;12456;652947;6545682848;91288314;2607690042;
            24219022671;05562;632111;1109370544;21750694;1658960408;
            07198403850;96245;544436;2981230987;87992724;4284909188;
            84580156166;09791;913387;5499200524;06368991;2560717606;
            05886116467;10940;507754;1002256983;15520005;5935729725;
            71636269561;88267;042825;2483600823;25753042;0752963450      
        ] in
        let digits = Array.imake 1000 0 in
        let digits = init digits 0 input in 
        let result = Loops.for_i 0 994 max_product { ~digits; product = 0 } in
        let { result ; ~digits; ~product } = result in
        let () = Print.int product; Print.newline () in
        free result; Array.irelease digits

end


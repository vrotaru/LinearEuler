(*

The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?

*)

module TriangleNumberDivisors = struct

    val main : unit -> unit
    let main () =
        let found = Loops.while_ testf accf 1 in
        let triangle_num = (found * (found + 1)) / 2 in
        Print.int triangle_num; Print.newline ()
    
    type t = { num : int; count : int }
    
    val private testf : int -> bool
    let testf num = 
        let triangle_num = (num * (num + 1)) / 2 in
        let t = num_divisors triangle_num in
        let { t; ~count } = t in
        let () = free t in
        count < 500
    
    val private accf : int -> int
    let accf num =
        num + 1
    
    (* if x = p1^a1 * p2^a2 * .. then the number of x divisors is (a1 + 1)*(a2 + 1) .. *)
    val private num_divisors : int -> t
    let num_divisors num =
        Primes.while_ test_num_divisors acc_num_divisors { ~num; count = 1 }
        
    val test_num_divisors : int * t obs -> bool
    let test_num_divisors prime t =
        prime <= t.num
    
    val acc_num_divisors : int * t -> t
    let acc_num_divisors prime t =
        let { t; ~num; ~count } = t in
        let num, ndiv = next_num num prime 0 in
        { t with ~num; count = count * (ndiv + 1) }
    
    val next_num : int * int * int-> int * int
    let next_num num prime acc =
        if num % prime = 0 then
            next_num (num / prime) prime (acc + 1)
        else
            num, acc

end

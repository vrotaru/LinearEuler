module CountPaths = struct

    type t = { places: int Array.t; w: int; h: int; step: int }
    
    val private make : int * int -> t
    let make w h = 
        let places = Array.imake (w * h) 1 in
        { ~places; ~w; ~h; step = 0 }
    
    val private release : t -> unit
    let release t = 
        let { t; ~places } = t in
        Array.irelease places;
        free t 
    
    val private update_place : t * int * int -> t
    let update_place t x y =
        let { t; ~places; ~w; ~h} = t in
        if x < w && y < h then
            let countx = if x > 0 then places.(w * y + x - 1 ) else 0 in
            let county = if y > 0 then places.(w * (y - 1) + x) else 0 in
            let places = Array.set places (w * y + x) (countx + county) in
            { t with ~places; ~w; ~h}
        else
            { t with ~places; ~w; ~h }
    
    val private update_step_aux : int * t -> t
    let update_step_aux i t =
        update_place t (t.step - i) i
        
    val private update_step : int * t -> t
    let update_step i t =
        let t = { t with step = i } in
        Loops.for_i 0 i update_step_aux t
      
    val count : int * int -> int
    let count w h =
        let t = make w h in
        let () = Print.newline () in
        let t = Loops.for_i 1 (w + h) update_step t in
        let { t; ~places } = t in
        let n = places.(w * (h - 1) +  w - 1) in        
        let () = Array.irelease places; free t in
        n
    
    val main : unit -> unit
    let main () =
        let n = count 21 21 in
        Print.int n;
        Print.newline ()

end
